.data #dyrektywa oznaczająca początek miejsca na dane
	.equ	zmienna,wartosc #dyrektywa tworzenia stałej
	nazwa:
		.typ	wartosc #wzór deklaracji dowolnej zmienej
	arg1:
		.byte	wartosc #zmeinna o rozmiarze 1 bajta
	arg2:
		.word	wartosc #zmienna o rozmiarze 2 bajtów
	arg3:
		.long	wartosc #zmienna o rozmiarze 4 bajtów
	arg4:
		.quad	wartosc #zmienna o rozmiarze 8 bajtów
	napis1:
		.ascii	"napis\n" #zmienna tesktowa
	napis2:
		.string "napis\n" #zmienna tekstowa
		
	#Deklaracja tabeli
	tabela:
		.long	2,4,6,2,5,7,6,1 #właściwa deklaracja tabeli
	lElementow: 
		.long ( . - tabela ) >> 2 #obliczamy rozmiar tabeli. ważne aby zaraz bo deklaracji tabeli
	
	#ważne funkcje systemowe
	.equ	create_64,0x55 # create file function
	.equ	open_64,0x02 # open file function
	.equ	close_64,0x03 # close file function
	.equ	write_64,0x01 # write data to file function
	.equ	read_64,0x00 # read data from file function
	.equ	exit_64,0x3c # exit program function
		
.text #dyrektywa oznaczająca początek rozkazów programu
	.global _start #dyrektywa wskazująca od której etykiety rozpocząć
	
	NOP	#odczekanie jednobajtowej operacji
	
	MOVQ	r1,r2 #przenieś 8 bajtów z r1 do r2
	MOVL	r1,r2 #przenieś 4 bajty z r1 do r2
	MOVW	r1,r2 #przenieś 2 bajty z r1 do r2
	MOVB	r1,r2 #przenieś 1 bajt z r1 do r2
	
	ADD	r1,r2 #dodaj zawartość rejestru r1 do r2, wynik zapisz w r2
	SUB	r1,r2 #dodaj zawartość rejestru r1 do r2, wynik zapisz w r2
	DIV	r1 #podziel zawartość rejestru %rax przez r1. wynik zapisz w %rax, reszte w %rdx; czesto wymaga ustawienia odpowiednich flag np. cqto
	MUL	r1 #poomnoz zawartość rejestru %rax przez r1. wynik zapisz w %rax
	AND	r1,r2 #koniuknkcja r1 i r2
	ORB	r1,r2 #alternatywa r1 i r2
	XOR	r1,r2 #dysjunkcjia r1 i r2
	SHR	l1,r2 #przesuniecie bitowe rejestru r2 o l1 bitów
	XCHG	r1,l1 #zamiana r1 i l1 miejscami (liczby 1 bajtowe)
	XCHGL	r1,l1 #zamiana r1 i li miejscami (liczby 4 bajtowe)
	XCHGQ	r1,l1 #zamiana r1 i li miejscami (liczby 8 bajtowe)
	DEC	r1 #dekrementacja r1 (liczba 1 bajtowa)
	DECL	r1 #dekrementacja r1 (liczba 4 bajtowa)
	DECQ	r1 #dekrementacja r1 (liczba 8 bajtowa)
	INC	r1 #inkrementacja r1 (liczba 1 bajtowa)
	INCL	r1 #inkrementacja r1 (liczba 4 bajtowa)
	INCQ	r1 #inkrementacja r1 (liczba 8 bajtowa)
	
	CMPB	l1,l2 #porównanie l1 i l2 (liczby 1 bajtowe)
	CMPW	l1,l2 #porównanie l1 i l2 (liczby 2 bajtowe)
	CMPL	l1,l2 #porównanie l1 i l2 (liczby 4 bajtowe)
	CMPQ	l1,l2 #porównanie l1 i l2 (liczby 8 bajtowe)
	JB	etykieta #skok warunkowy, gdy l1 > l2 to przejdz do etykieta (nie działa dla ujemnych!)
	JE	etykieta #skok warunkowy, gdy l1 == l2 to przejdz do etykieta
	JA	etykieta #skok warunkowy, gdy l1 < l2 to przejdz do etykieta (nie działa dla ujemnych!)
	JBE	etykieta #skok warunkowy, gdy l1 >= l2 to przejdz do etykieta (nie działa dla ujemnych!)
	JBA	etykieta #skok warunkowy, gdy l1 <= l2 to przejdz do etykieta (nie działa dla ujemnych!)
	JNZ	etykieta #skok warunkiwy, gdy wynik porównania różny od 0
	JZ	etykieta #skok warunkowy, gdy wynik porównania to 0
	JG	etykieta #skok warunkowy, gdy l1 < l2 to przejdz do etykieta (działa dla ujemnych!)
	JL	etykieta #skok warunkowy, gdy l1 > l2 to przejdz do etykieta (działa dla ujemnych!)
	JMP	etykieta #skok bezwarunkowy do etykieta
	
	POP r1 #pobranie argumentu ze stosu i zapis w r1
	PUSH r1 #dodanie argumentu z r1 do stosu
	
	MOVL tabela(,r1,l2) r3 #r1 to rejestr z rozmiarem tabeli, l2 to ilość bajtów do odczytania, r3 to docelowy rejestr
	
	LOOP	etykieta #skok bezwarunkowy do etykieta, przed wykonaniem skoku wartosc rejestru %rcx jest zmniejszana o 1 i jeżeli wartość tego rejestru jest większa od 0 ty następuje przejście do etykieta 
	
	CALL	mojaFunkcja #wywołanie funkcji mojaFunkcja
	
	#definiowanie własnej function
	.type mojaFunkcja, @function
		mojaFunkcja:
			...instrukce..
			RET #dyrektywa oznaczajaca powrót do miejsca wywołania funkcji
	
	
	LODSB #odczytuje jeden bajt do rejestru %al z bufora znajdującego się w rejestrze %esi
	STOSB #umieszcza zawartość rejestru %al spowrotem w buforze
	
	#używanie funkcji systemowych
	#do rejestru %rax zawsze zapisujemy adres funkcji, którą chcemy użycie
	#do rejestru %rdi zapisujemy uchwyt do pliku. Tyczy się to również 3 podstawowych strumieni(stdin-0, stdout-1, stderr-2)
	#rejestry %rsi i %rdx są wykorzystywane równie w zależności od funkcji
	#dla read/write do %rsi przekazuje się bufor do/z którego należy wczytać dane
	#dla open/create do %rsi i %rdx przekazuje się odpowiednie flagii
	#dla read/write do %rdx przekazuje się ilość bajtów do odczytania
	#wartość zwracana przez funkcję znajduje się zawsze w rejestrze %rax
	
	# przykład użycia funkcji write
	MOVL 0x01,%eax #(0x04 to adres funkcji write)
	MOVL $1,%ebx # stdout
	MOVL $starttxt,%ecx # adres tekstu
	MOVL $startlen,%edx # ilość znaków
	INT $0x80 # przerwanie
	NOP # odczekanie jednobajtowej operacji nic nie robiącej
	CMP %edx,%eax
	JNZ error #jeżeli EAX<>EDX to cos poszlo nie tak

	#pisanie funkcji do wykorzystania w c
	#pierwszych 6 argumentów funkcji jest przekazywanych do rejestrów(w tej kolejności) %rdi, %rsi, %rdx, %rcx, %r8, %r9.Kolejne argumenty znajdują się na stosie
	#dobra praktyka jest zapisanie tych 6 argumentow na stosie, tak aby mozliwe bylo korzystanie z tych rejestrow podczas dzialania funkcji
	#wartosc zwracana przez funkcję ostatecznie musi znaleźć się w rejestrze %rax
	#piszac funkcje dla jezyka c musimy zadbac o zachowanie stosu. Oznacza to zapisanie rejestru %rbp i zastapinie go rejestrem %rsp, który będzie naszym stosem. Na koncu dzialania funkcji nalezy przywrocic stos (push %rbp	mov rsp,%rbp)(mov %rbp,%rsp		pop	%rbp)
	
	#Rodzaje rejestrów:
	#%rax,%rbx,%rcx,%rdx,%rbp,%rsi,%rdi,%rsp, %r8,%r9,%r10,%r11,%r12,%r13,%r14,%r15 - 8 bajtowe rejestry
	#%eax,%ebx,%ecx,%edx,%esp,%esp,%ebp,%esi,%edi - 4 bajtowe rejestry, znajduja sie wewnatrz rjestrow 8 bajtowych
	#%ax,%bx,%cx,%dx,%sp,%bp,%si,%di - 2 bajtowe rejesry, znajdują się wewnątrz 4 bajtowych rejestrów (doklejone do prawej)
	#%ah,%al,%bh,%bl,%ch,%cl,%dh,%dl - 1 bajtowe rejestry, znajują się wewnątrz 2 bajtowych rejestrów (Xh - do lewej, Xl - do prawej)